import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;
import java.util.regex.Pattern;

public class PasswordStorageApp extends JFrame {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(Account::new);
    }
}

class Account extends JFrame {
    private final Map<String, String> userCredentials; // Simulated storage for simplicity
    public Account() {
        userCredentials = new HashMap<>();
        addDefaultUsers();
        createAndShowGUI();
    }
    private void addDefaultUsers() {
        userCredentials.put("1@gmail.com", "123");
        userCredentials.put("2@gmail.com", "456");
        userCredentials.put("3@gmail.com", "789");
    }
    private void createAndShowGUI() {
        setTitle("Password Storage App - Account");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(3, 1, 20, 25));
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));

        JLabel welcomeLabel = new JLabel("<html><b>Welcome to Password Storage App</b></html>");
        welcomeLabel.setFont(new Font("Algerian", Font.BOLD, 36));
        welcomeLabel.setForeground(Color.BLUE);
        panel.add(welcomeLabel);

        JButton loginButton = new JButton("Log In");
        loginButton.setFont(new Font(Font.SERIF, Font.BOLD, 28));
        loginButton.setBackground(Color.lightGray);
        loginButton.setForeground(Color.black);
        loginButton.setBorder(BorderFactory.createLineBorder(Color.gray, 6));
        loginButton.addActionListener(e -> new LoginPage(this));
        panel.add(loginButton);

        JButton registerButton = new JButton("Register");
        registerButton.setFont(new Font(Font.SERIF, Font.BOLD, 28));
        registerButton.setBackground(Color.lightGray);
        registerButton.setForeground(Color.black);
        registerButton.setBorder(BorderFactory.createLineBorder(Color.gray, 6));
        registerButton.addActionListener(e -> new RegisterPage(this));
        panel.add(registerButton);

        panel.setBackground(Color.WHITE);
        add(panel);
        setVisible(true);
    }

    // Method to validate and register a new user
    public boolean registerUser(String email, String password) {
        if (isValidEmail(email) && !password.isEmpty() && !userCredentials.containsKey(email)) {
            userCredentials.put(email, password);
            return true;
        }
        return false;
    }

    // Method to authenticate an existing user
    public boolean authenticateUser(String email, String password) {
        return userCredentials.containsKey(email) && userCredentials.get(email).equals(password);
    }

    public static boolean isValidEmail(String email) {
        final String EMAIL_PATTERN = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$";
        Pattern pattern = Pattern.compile(EMAIL_PATTERN);
        return pattern.matcher(email).matches();
    }
}

class LoginPage extends JFrame {
    private final JTextField emailField;
    private final JPasswordField passwordField;

    public LoginPage(Account Account) {
        setTitle("Log In");
        setSize(400, 200);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(Account);

        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(3, 2, 10, 10));
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));

        panel.add(new JLabel("Email:"));
        emailField = new JTextField();
        panel.add(emailField);

        panel.add(new JLabel("Password:"));
        passwordField = new JPasswordField();
        panel.add(passwordField);

        JButton loginButton = getjButton(Account);
        panel.add(loginButton);

        panel.setBackground(Color.lightGray);
        add(panel);
        setVisible(true);
    }

    private JButton getjButton(Account Account) {
        JButton loginButton = new JButton("Log In");
        loginButton.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 18));
        loginButton.setBackground(Color.BLACK);
        loginButton.setForeground(Color.WHITE);
        loginButton.setBorder(BorderFactory.createLineBorder(Color.WHITE, 4));
        loginButton.addActionListener(e -> {
            String email = emailField.getText().trim();
            String password = new String(passwordField.getPassword()).trim();

            if (Account.authenticateUser(email, password)) {
                new MainDashboard(email);
                Account.dispose();
                dispose(); // Close the login window after successful login
            } else {
                JOptionPane.showMessageDialog(this, "Invalid email or password. Please try again.");
            }
        });
        return loginButton;
    }

}

class RegisterPage extends JFrame {
    private final JTextField emailField;
    private final JPasswordField passwordField;

    public RegisterPage(Account Account) {
        setTitle("Register");
        setSize(400, 200);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(Account);

        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(3, 2, 10, 10));
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));

        panel.add(new JLabel("Email:"));
        emailField = new JTextField();
        panel.add(emailField);

        panel.add(new JLabel("Password:"));
        passwordField = new JPasswordField();
        panel.add(passwordField);

        JButton registerButton = getjButton(Account);
        panel.add(registerButton);

        panel.setBackground(Color.lightGray);

        add(panel);
        setVisible(true);
    }

    private JButton getjButton(Account Account) {
        JButton registerButton = new JButton("Register");
        registerButton.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 18));
        registerButton.setBackground(Color.BLACK);
        registerButton.setForeground(Color.WHITE);
        registerButton.setBorder(BorderFactory.createLineBorder(Color.WHITE, 4));
        registerButton.addActionListener(e -> {
            String email = emailField.getText().trim();
            String password = new String(passwordField.getPassword()).trim();

            if (Account.registerUser(email, password)) {
                JOptionPane.showMessageDialog(this, "Registration successful. You can now log in.");
                dispose(); // Close the register window after successful registration
            } else {
                JOptionPane.showMessageDialog(this, "Registration failed. Please try again.");
            }
        });
        return registerButton;
    }
}
class PasswordStorage {
    private static Map<String, PasswordEntry> passwordMap = new HashMap<>();

    // Method to get the password map
    public static Map<String, PasswordEntry> getPasswordMap() {
        return passwordMap;
    }
}

class MainDashboard extends JFrame {
    private final String authenticatedEmail;

    public MainDashboard(String authenticatedEmail) {
        this.authenticatedEmail = authenticatedEmail;
        createAndShowGUI();
    }

    private void createAndShowGUI() {
        setTitle("Password Storage App - Main Dashboard");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(4, 1, 10, 10));
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));

        JLabel welcomeLabel = new JLabel("<html><b>WELCOME, " + authenticatedEmail + "</b></html>");
        welcomeLabel.setFont(new Font(Font.SERIF, Font.ITALIC, 24));
        welcomeLabel.setForeground(Color.BLUE);
        panel.add(welcomeLabel, BorderLayout.NORTH);

        JButton displayButton = getjButton();
        panel.add(displayButton);

        JButton addButton = new JButton("Add Password");
        addButton.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        addButton.setBackground(Color.LIGHT_GRAY);
        addButton.setForeground(Color.BLACK);
        addButton.setBorder(BorderFactory.createLineBorder(Color.GRAY, 6));

        addButton.addActionListener(e -> new AddPasswordWindow());
        panel.add(addButton);

        JButton logoutButton = new JButton("Log Out");
        logoutButton.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        logoutButton.setBackground(Color.lightGray);
        logoutButton.setForeground(Color.black);
        logoutButton.setBorder(BorderFactory.createLineBorder(Color.gray, 6));

        logoutButton.addActionListener(e -> {
            new Account();
            dispose();
        });
        panel.add(logoutButton);

        panel.setBackground(Color.white);
        add(panel);
        setVisible(true);
    }

    private JButton getjButton() {
        JButton displayButton = new JButton("Display Passwords");
        displayButton.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 20));
        displayButton.setBackground(Color.LIGHT_GRAY);
        displayButton.setForeground(Color.BLACK);
        displayButton.setBorder(BorderFactory.createLineBorder(Color.GRAY, 6));
        displayButton.addActionListener(e ->{
            DisplayPasswordsWindow displayWindow = new DisplayPasswordsWindow(authenticatedEmail,PasswordStorage.getPasswordMap());
            displayWindow.refreshDisplay();
        });
        return displayButton;
    }
}

class DisplayPasswordsWindow extends JFrame {
    public static Map<String, PasswordEntry> passwordMap = new HashMap<>();
    private DefaultTableModel tableModel; // Table model to manage table data
    private JTable table; // JTable to display the password data

    public DisplayPasswordsWindow(String authenticatedEmail ,Map<String, PasswordEntry> passwordMap) {
        this.passwordMap = passwordMap;
        passwordMap.put("Email", new PasswordEntry("email@example.com", "password123"));
        passwordMap.put("Facebook", new PasswordEntry("user123", "pass@facebook"));
        passwordMap.put("Twitter", new PasswordEntry("twitterUser", "twit@1234"));
        createAndShowGUI();
    }

    private void createAndShowGUI() {
        setTitle("Display Passwords");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));

        // Set up the table model with column names
        tableModel = new DefaultTableModel(new Object[]{"App name", "Username", "Password"}, 0);

        // Set up the table with the model
        table = new JTable(tableModel);
        table.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 16));
        table.setRowHeight(30);

        // Populate the table with existing data
        refreshDisplay();

        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);

        JPanel buttonPanel = getButtonPanel();
        panel.add(scrollPane, BorderLayout.CENTER);
        panel.add(buttonPanel, BorderLayout.SOUTH);

        panel.setBackground(Color.lightGray);
        add(panel);
        setVisible(true);
    }

    // Refresh the table display with the current password map
    public void refreshDisplay() {
        tableModel.setRowCount(0); // Clear the table model

        for (Map.Entry<String, PasswordEntry> entry : passwordMap.entrySet()) {
            tableModel.addRow(new Object[]{entry.getKey(), entry.getValue().username, entry.getValue().password});
        }
    }

    private JPanel getButtonPanel() {
        JButton copyButton = getjButton();
        copyButton.setFont(new Font(Font.SERIF, Font.BOLD, 16));
        copyButton.setBackground(Color.white);
        copyButton.setForeground(Color.black);
        copyButton.setBorder(BorderFactory.createLineBorder(Color.black, 2));

        JButton exportButton = new JButton("Export file");
        exportButton.setFont(new Font(Font.SERIF, Font.BOLD, 16));
        exportButton.setBackground(Color.white);
        exportButton.setForeground(Color.black);
        exportButton.setBorder(BorderFactory.createLineBorder(Color.black, 2));
        exportButton.addActionListener(e -> exportToFile());

        JButton emailButton = new JButton("Email password");
        emailButton.setFont(new Font(Font.SERIF, Font.BOLD, 16));
        emailButton.setBackground(Color.white);
        emailButton.setForeground(Color.black);
        emailButton.setBorder(BorderFactory.createLineBorder(Color.black, 2));
        emailButton.addActionListener(e -> sendViaEmail());

        JButton importButton = new JButton("Import file");
        importButton.setFont(new Font(Font.SERIF, Font.BOLD, 16));
        importButton.setBackground(Color.white);
        importButton.setForeground(Color.black);
        importButton.setBorder(BorderFactory.createLineBorder(Color.black, 2));
        importButton.addActionListener(e -> importFromFile());

        JButton deleteButton = new JButton("Delete Password");
        deleteButton.setFont(new Font(Font.SERIF, Font.BOLD, 16));
        deleteButton.addActionListener(e -> deletePassword());
        deleteButton.setBackground(Color.white);
        deleteButton.setForeground(Color.black);
        deleteButton.setBorder(BorderFactory.createLineBorder(Color.black, 2));

        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayout(3, 2, 10, 10));
        buttonPanel.add(copyButton);
        buttonPanel.add(exportButton);
        buttonPanel.add(emailButton);
        buttonPanel.add(importButton);
        buttonPanel.add(deleteButton);

        return buttonPanel;
    }

    private JButton getjButton() {
        JButton copyButton = new JButton("Copy password");
        copyButton.addActionListener(e -> {
            int selectedRow = table.getSelectedRow();
            if (selectedRow != -1) {
                StringBuilder selectedText = new StringBuilder();
                for (int i = 0; i < table.getColumnCount(); i++) {
                    selectedText.append(table.getValueAt(selectedRow, i)).append(" ");
                }
                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(selectedText.toString().trim()), null);
                JOptionPane.showMessageDialog(this, "Copied to clipboard.");
            } else {
                JOptionPane.showMessageDialog(this, "Please select a row to copy.");
            }
        });
        return copyButton;
    }

    private void exportToFile() {
        JFileChooser fileChooser = new JFileChooser();
        int option = fileChooser.showSaveDialog(this);

        if (option == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try (FileWriter writer = new FileWriter(file)) {
                for (int i = 0; i < tableModel.getRowCount(); i++) {
                    for (int j = 0; j < tableModel.getColumnCount(); j++) {
                        writer.write(tableModel.getValueAt(i, j).toString() + " - ");
                    }
                    writer.write("\n");
                }
                JOptionPane.showMessageDialog(this, "Exported to file: " + file.getAbsolutePath());
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Failed to export to file.");
            }
        }
    }

    private void sendViaEmail() {
        String recipientEmail = JOptionPane.showInputDialog(this, "Enter recipient email address:");
        if (recipientEmail != null && !recipientEmail.trim().isEmpty()) {
            // Replace with your email credentials and SMTP settings
            final String username = "your-email@example.com";
            final String password = "your-email-password";

            Properties props = new Properties();
            props.put("mail.smtp.auth", "true");
            props.put("mail.smtp.starttls.enable", "true");
            props.put("mail.smtp.host", "smtp.example.com");
            props.put("mail.smtp.port", "587");

            Session session = Session.getInstance(props, new javax.mail.Authenticator() {
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(username, password);
                }
            });

            try {
                Message message = new MimeMessage(session);
                message.setFrom(new InternetAddress(username));
                message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmail));
                message.setSubject("Exported Passwords");

                StringBuilder emailContent = new StringBuilder();
                for (int i = 0; i < tableModel.getRowCount(); i++) {
                    for (int j = 0; j < tableModel.getColumnCount(); j++) {
                        emailContent.append(tableModel.getValueAt(i, j)).append(" - ");
                    }
                    emailContent.append("\n");
                }
                message.setText(emailContent.toString());

                Transport.send(message);
                JOptionPane.showMessageDialog(this, "Email sent to: " + recipientEmail);
            } catch (MessagingException e) {
                JOptionPane.showMessageDialog(this, "Failed to send email.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Invalid email address.");
        }
    }

    private void importFromFile() {
        JFileChooser fileChooser = new JFileChooser();
        int option = fileChooser.showOpenDialog(this);

        if (option == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            Map<String, PasswordEntry> newEntries = new HashMap<>();
            try (Scanner scanner = new Scanner(file)) {
                while (scanner.hasNextLine()) {
                    String line = scanner.nextLine();
                    String[] parts = line.split(" - ");
                    if (parts.length == 3) {
                        String appName = parts[0];
                        String username = parts[1];
                        String password = parts[2];
                        if (!passwordMap.containsKey(appName)) {
                            newEntries.put(appName, new PasswordEntry(username, password)); // Collect new entries
                        }
                    }
                }

                passwordMap.putAll(newEntries);
                JOptionPane.showMessageDialog(this, "Imported from file: " + file.getAbsolutePath());
                refreshDisplay(); // Refresh the display after importing
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Failed to import from file.");
            }
        }
    }
    private void deletePassword() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            String appName = tableModel.getValueAt(selectedRow, 0).toString();
            passwordMap.remove(appName); // Remove the entry from the password map
            tableModel.removeRow(selectedRow); // Remove the row from the table model
            JOptionPane.showMessageDialog(this, "Deleted password for : " + appName);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a app to delete.");
        }
    }
}

class PasswordOptionsDialog extends JDialog {
    private final JTextField lengthField;
    private final JCheckBox uppercaseCheckbox;
    private final JCheckBox lowercaseCheckbox;
    private final JCheckBox numbersCheckbox;
    private final JCheckBox symbolsCheckbox;
    private boolean confirmed = false;

    public PasswordOptionsDialog(JFrame parent) {
        super(parent, "Password Options", true);
        setSize(300, 300);
        setLayout(new GridLayout(6, 1, 10, 10));
        setLocationRelativeTo(parent);

        // Password length
        add(new JLabel("Password Length:"));
        lengthField = new JTextField("10");
        add(lengthField);

        // Character sets
        uppercaseCheckbox = new JCheckBox("Include Uppercase", true);
        add(uppercaseCheckbox);

        lowercaseCheckbox = new JCheckBox("Include Lowercase", true);
        add(lowercaseCheckbox);

        numbersCheckbox = new JCheckBox("Include Numbers", true);
        add(numbersCheckbox);

        symbolsCheckbox = new JCheckBox("Include Symbols", true);
        add(symbolsCheckbox);

        // Buttons
        JPanel buttonPanel = new JPanel(new FlowLayout());
        JButton generateButton = new JButton("Generate");
        generateButton.setFont(new Font(Font.SERIF, Font.BOLD, 16));
        generateButton.setBackground(Color.white);
        generateButton.setForeground(Color.BLACK);
        generateButton.setBorder(BorderFactory.createLineBorder(Color.GRAY, 4));
        generateButton.addActionListener(e -> {
            confirmed = true;
            dispose();
        });
        buttonPanel.add(generateButton);

        JButton cancelButton = new JButton("Cancel");
        cancelButton.setFont(new Font(Font.SERIF, Font.BOLD, 16));
        cancelButton.setBackground(Color.white);
        cancelButton.setForeground(Color.BLACK);
        cancelButton.setBorder(BorderFactory.createLineBorder(Color.GRAY, 6));
        cancelButton.addActionListener(e -> dispose());
        buttonPanel.add(cancelButton);

        add(buttonPanel);
    }

    public boolean isConfirmed() {
        return confirmed;
    }

    public int getPasswordLength() {
        return Integer.parseInt(lengthField.getText().trim());
    }

    public boolean includeUppercase() {
        return uppercaseCheckbox.isSelected();
    }

    public boolean includeLowercase() {
        return lowercaseCheckbox.isSelected();
    }

    public boolean includeNumbers() {
        return numbersCheckbox.isSelected();
    }

    public boolean includeSymbols() {
        return symbolsCheckbox.isSelected();
    }
}

class AddPasswordWindow extends JFrame {
    private final JTextField appNameField;
    private final JTextField usernameField;
    private final JPasswordField passwordField;

    public AddPasswordWindow() {
        setTitle("Add Password");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(4, 2, 10, 10));
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));

        panel.add(new JLabel("App Name:"));
        appNameField = new JTextField();
        panel.add(appNameField);

        panel.add(new JLabel("Username:"));
        usernameField = new JTextField();
        panel.add(usernameField);

        panel.add(new JLabel("Password:"));
        passwordField = new JPasswordField();
        panel.add(passwordField);

        JButton generateButton = new JButton("Generate");
        generateButton.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 18));
        generateButton.setBackground(Color.BLACK);
        generateButton.setForeground(Color.WHITE);
        generateButton.setBorder(BorderFactory.createLineBorder(Color.WHITE, 4));
        generateButton.addActionListener(e -> openPasswordOptionsDialog());
        panel.add(generateButton);

        JButton addButton = new JButton("Add");
        addButton.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 18));
        addButton.setBackground(Color.BLACK);
        addButton.setForeground(Color.WHITE);
        addButton.setBorder(BorderFactory.createLineBorder(Color.WHITE, 4));
        addButton.addActionListener(e -> addPassword());
        panel.add(addButton);

        panel.setBackground(Color.LIGHT_GRAY);
        add(panel);
        setVisible(true);
    }

    private void openPasswordOptionsDialog() {
        PasswordOptionsDialog optionsDialog = new PasswordOptionsDialog(this);
        optionsDialog.setVisible(true);

        if (optionsDialog.isConfirmed()) {
            int length = optionsDialog.getPasswordLength();
            boolean useUppercase = optionsDialog.includeUppercase();
            boolean useLowercase = optionsDialog.includeLowercase();
            boolean useNumbers = optionsDialog.includeNumbers();
            boolean useSymbols = optionsDialog.includeSymbols();

            String generatedPassword = PasswordGenerator.generatePassword(length, useUppercase, useLowercase, useNumbers, useSymbols);
            passwordField.setText(generatedPassword);
        }
    }
    private void addPassword() {
        String appName = appNameField.getText().trim();
        String username = usernameField.getText().trim();
        String password = new String(passwordField.getPassword()).trim();

        if (appName.isEmpty() || username.isEmpty() || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields are required.");
            return;
        }

        if (DisplayPasswordsWindow.passwordMap.containsKey(appName)) {
            JOptionPane.showMessageDialog(this, "App name already exists.");
            return;
        }
        DisplayPasswordsWindow.passwordMap.put(appName, new PasswordEntry(username, password));
        for (Window window : Window.getWindows()) {
            if (window instanceof DisplayPasswordsWindow) {
                ((DisplayPasswordsWindow) window).refreshDisplay();
            }
        }
        // Add logic to store the new password entry
        JOptionPane.showMessageDialog(this, "Password added successfully.");
        dispose();
    }
}

class PasswordEntry {
    String username;
    String password;

    public PasswordEntry(String username, String password) {
        this.username = username;
        this.password = password;
    }
}

class PasswordGenerator {
    public static String generatePassword(int length, boolean useUppercase, boolean useLowercase, boolean useNumbers, boolean useSymbols) {
        StringBuilder password = new StringBuilder();
        String upperCaseLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        String lowerCaseLetters = "abcdefghijklmnopqrstuvwxyz";
        String numbers = "0123456789";
        String symbols = "!@#$%^&*()-_+=<>?";

        Random random = new Random();
        String allowedChars = "";
        if (useUppercase) allowedChars += upperCaseLetters;
        if (useLowercase) allowedChars += lowerCaseLetters;
        if (useNumbers) allowedChars += numbers;
        if (useSymbols) allowedChars += symbols;
        if (allowedChars.isEmpty()) {
            throw new IllegalArgumentException("No character sets selected for password generation.");
        }
        // Generate the password
        for (int i = 0; i < length; i++) {
            password.append(allowedChars.charAt(random.nextInt(allowedChars.length())));
        }
        return password.toString();
    }
}
